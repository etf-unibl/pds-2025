# This is a workflow used for automated testing of student assignments
name: verification

# Controls when the workflow will run
on:
  # Triggers the workflow on pull request events on the "assignments" branch
  pull_request:
    branches: [ "assignments" ]
    types: [edited, synchronize, opened, reopened]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job checks the code style
  linter:
    # Uncomment the line below to disable the linter job
    if: ${{ false }}
    runs-on: windows-latest
    env:
      PR_TITLE: ${{ github.event.pull_request.title }}
    
    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v4
      
      - name: Check code style
        shell: pwsh
        run: |
          cd vhdllint-ohwr
          .\check-files.bat ($env:PR_TITLE -replace '[^0-9+]') ..\assignments\

  # This job starts docker image and runs simulation script
  pds-verification:
    # Uncomment the line below to disable the pds-verification job
    if: ${{ false }}
    runs-on: ubuntu-latest
    env:
      PR_TITLE: ${{ github.event.pull_request.title }}
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout main repo
        uses: actions/checkout@v4
          
        # ModelSim requires these 32-bit libraries to be installed: https://www.intel.com/content/www/us/en/programmable/support/support-resources/knowledge-base/solutions/rd05302012_638.html
        # Some of these are technically only required for the GUI, but it won't load on a headless server without them.
      - name: Install ModelSim dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install lib32z1 lib32stdc++6 libexpat1:i386 libc6:i386 libsm6:i386 libncurses5:i386 libx11-6:i386 zlib1g:i386 libxext6:i386 libxft2:i386
        # Save time on subsequent runs by caching the install of ModelSim.
        # Download is ~1.5GB and combined with the installation process it takes over 3 minutes.
      - name: Cache ModelSim
        uses: actions/cache@v4
        with:
          path: $HOME/intelFPGA
          key: ${{ runner.os }}-modelsim
      - name: Install ModelSim if not cached
        run: |
          stat $HOME/intelFPGA/20.1/modelsim_ase || ( curl 'https://download.altera.com/akdlm/software/acdsinst/20.1std.1/720/ib_installers/ModelSimSetup-20.1.1.720-linux.run' -o ModelSimSetup.run && chmod +x ModelSimSetup.run && ./ModelSimSetup.run --mode unattended --accept_eula 1 )
          stat $HOME/intelFPGA/20.1/modelsim_ase || ( sed -i 's/linux_rh60/linux/g' $HOME/intelFPGA/20.1/modelsim_ase/vco )
      - name: Add ModelSim to PATH
        run: echo "$HOME/intelFPGA/20.1/modelsim_ase/bin" >> $GITHUB_PATH
      
      - name: Checkout verification environment
        uses: actions/checkout@v4
        with:
          repository: knezicm/pds-2022-verification
          token: ${{ secrets.PDS_PAT }}
          path: pds-verif
          
      - name: Run script (simulation and synthesis)
        run: |
          cd pds-verif/verif
          python ./run_test.py --issue=$(echo $PR_TITLE | grep -o -E '[0-9]+') --path=$(pwd)/../.. --lookup_table=./lookup/pds_2025_issues.lookup
      
      - name: Make new dir and copy results
        if: always()
        run: |
          mkdir results
          mkdir results/sim
          mkdir results/synth
          cp -r pds-verif/verif/sim/$(echo $PR_TITLE | grep -o -E '[0-9]+')/test_results/* results/sim
          cp -r pds-verif/verif/synth/$(echo $PR_TITLE | grep -o -E '[0-9]+') results/synth

      - name: Upload simulation and synthesis artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: verif-artifacts
          path: results
          retention-days: 10
    
  # This job prepares environment and runs simulation script
  verif:
    # Uncomment the line below to disable the verif job
    if: ${{ false }}
    # The job runs on a self-hosted runner
    runs-on: self-hosted
    env:
      PR_TITLE: ${{ github.event.pull_request.title }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout main repo
        uses: actions/checkout@v4
          
      - name: Checkout verification environment
        uses: actions/checkout@v4
        with:
          repository: knezicm/pds-2022-verification
          token: ${{ secrets.PDS_PAT }}
          path: pds-verif
      
      - name: Set Python and Quartus aliases
        run: |
          shopt -s expand_aliases
          alias python='python3'
          alias quartus_cmd='quartus_cmd --64bit'
          alias quartus_map='quartus_map --64bit'
          alias quartus_cdb='quartus_cdb --64bit'
          alias quartus_fit='quartus_fit --64bit'
          alias quartus_asm='quartus_asm --64bit'
          alias quartus_eda='quartus_eda --64bit'
          alias quartus_sta='quartus_sta --64bit'
      
      - name: Add Modelsim and Quartus to PATH
        run: |
          echo "$HOME/intelFPGA_lite/17.0/modelsim_ase/bin" >> $GITHUB_PATH
          echo "$HOME/intelFPGA_lite/17.0/quartus/bin" >> $GITHUB_PATH
    
      - name: Run script (simulation and synthesis)
        run: |
          cd pds-verif/verif
          python ./run_test.py --synth --issue=$(echo $PR_TITLE | grep -o -E '[0-9]+') --path=$(pwd)/../.. --lookup_table=./lookup/pds_2025_issues.lookup
      
      - name: Make new dir and copy results
        if: always()
        run: |
          mkdir results
          mkdir results/sim
          mkdir results/synth
          cp -r pds-verif/verif/sim/$(echo $PR_TITLE | grep -o -E '[0-9]+')/test_results/* results/sim
          cp -r pds-verif/verif/synth/$(echo $PR_TITLE | grep -o -E '[0-9]+') results/synth

      - name: Upload simulation and synthesis artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: verif-artifacts
          path: results
          retention-days: 10
